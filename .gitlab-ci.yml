variables:
  REGISTRY: "docker-hub.2gis.ru"
  DEIS_CONTROLLER_PROD_N3: "http://deis.k8s.n3.nato"
  DEIS_CONTROLLER_PROD_M1: "http://deis.k8s.m1.nato"
  DEIS_CONTROLLER_PROD_D1: "http://deis.k8s.d1.nato"
  DEIS_MEMORY_LIMITS_PROD_N3: "cmd=256M/512M"
  DEIS_MEMORY_LIMITS_PROD_M1: "cmd=256M/512M"
  DEIS_MEMORY_LIMITS_PROD_D1: "cmd=256M/512M"
  DEIS_MEMORY_LIMITS_STAGING: "cmd=384M/512M"
  DEIS_SCALE_PROD_N3: "cmd=1"
  DEIS_SCALE_PROD_M1: "cmd=1"
  DEIS_SCALE_PROD_D1: "cmd=1"

stages:
  - build:app
  - build:run-tests
  - build:image
  - deploy
  - end

before_script:
  - export APPLICATION=`make -s print-APPLICATION`
  - source ${CI_PROJECT_DIR}/ci-starter-kit/utils.sh
  - export BRANCH_NAME=`echo ${CI_BUILD_REF_NAME} | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g' | sed -e 's/[^a-z0-9-]//g'`
  - export GIT_SHA=`git rev-parse --short=8 HEAD`
  - export CI_DEV_TAG="dev-${BRANCH_NAME}-${GIT_SHA}"
  - export CI_TAG=`[[ -z ${CI_BUILD_TAG} ]] && echo "branch-${BRANCH_NAME}-${GIT_SHA}" || echo "${CI_BUILD_TAG}"`

# ================= Test & Build =================

build:app:
  image: $REGISTRY/microsoft/aspnetcore-build:1.1.0-projectjson
  stage: build:app
  when: always
  script:
    - dotnet restore --configfile ./.nuget/NuGet.Config
    - dotnet publish src/VStore.Host --configuration Release --runtime ubuntu.14.04-x64 --output publish/vstore
    - dotnet publish tests/VStore.UnitTests --configuration Release --runtime ubuntu.14.04-x64 --output publish/vstore-tests
  tags: [ 2gis, docker ]
  artifacts:
    name: "${CI_BUILD_REF_NAME}"
    expire_in: '1 week'
    paths:
      - publish/vstore/
      - publish/vstore-tests/

build:run-tests:
  image: $REGISTRY/microsoft/dotnet:1.1.1-sdk-1.0.0-preview2-1-003177
  stage: build:run-tests
  when: always
  script:
    - dotnet restore tests/VStore.UnitTests --configfile ./.nuget/NuGet.Config
    - dotnet test tests/VStore.UnitTests --output publish/vstore-tests --configuration Release --no-build
  tags: [ 2gis, docker ]
  dependencies:
    - build:app

build:image:
  stage: build:image
  when: manual
  script:
    - TAG=$CI_TAG DOCKER_FILE=publish/vstore/Dockerfile DOCKER_BUILD_CONTEXT=publish/vstore make docker-build
    - TAG=$CI_TAG make docker-push
  tags: [ docker-engine, io ]
  dependencies:
    - build:app
    - build:run-tests

# ================ Deploy =================

deploy:staging-01:
  stage: deploy
  environment: staging
  when: manual
  script:
    - sed -i -e 's/{EnvIndex}/01/g' env/staging.ini
    - echo "AWS_ACCESS_KEY_ID=${CEPH_STAGING_KEY_ID}" >> env/staging.ini
    - echo "AWS_SECRET_ACCESS_KEY=${CEPH_STAGING_ACCESS_KEY}" >> env/staging.ini
    - >
      make docker-run-deis-client
      deis2-config-create DEIS_PROFILE=staging DEIS2_USERNAME=${DEIS2_STAGE_USERNAME} DEIS2_TOKEN=${DEIS2_STAGE_TOKEN}
      deis2-create DEIS_APPLICATION="${APPLICATION}-01"
      deis2-config-push DEIS2_ENV_FILE=env/staging.ini
      deis2-memory-limits-set DEIS2_MEMORY_LIMITS="${DEIS_MEMORY_LIMITS_STAGING}" 
      deis2-cpu-limits-set deis2-healthchecks-set
      deis2-pull TAG=$CI_TAG
      deis2-scale
      deis2-info deis2-limits-list deis2-healthchecks-list deis2-processes-check
  tags: [ docker-engine, io ]
  dependencies: []

deploy:staging-02:
  stage: deploy
  environment: staging
  when: manual
  script:
    - sed -i -e 's/{EnvIndex}/02/g' env/staging.ini
    - echo "AWS_ACCESS_KEY_ID=${CEPH_STAGING_KEY_ID}" >> env/staging.ini
    - echo "AWS_SECRET_ACCESS_KEY=${CEPH_STAGING_ACCESS_KEY}" >> env/staging.ini
    - >
      make docker-run-deis-client
      deis2-config-create DEIS_PROFILE=staging DEIS2_USERNAME=${DEIS2_STAGE_USERNAME} DEIS2_TOKEN=${DEIS2_STAGE_TOKEN}
      deis2-create DEIS_APPLICATION="${APPLICATION}-02"
      deis2-config-push DEIS2_ENV_FILE=env/staging.ini
      deis2-memory-limits-set DEIS2_MEMORY_LIMITS="${DEIS_MEMORY_LIMITS_STAGING}" 
      deis2-cpu-limits-set deis2-healthchecks-set
      deis2-pull TAG=$CI_TAG
      deis2-scale
      deis2-info deis2-limits-list deis2-healthchecks-list deis2-processes-check
  tags: [ docker-engine, io ]
  dependencies: []

deploy:staging-03:
  stage: deploy
  environment: staging
  when: manual
  script:
    - sed -i -e 's/{EnvIndex}/03/g' env/staging.ini
    - echo "AWS_ACCESS_KEY_ID=${CEPH_STAGING_KEY_ID}" >> env/staging.ini
    - echo "AWS_SECRET_ACCESS_KEY=${CEPH_STAGING_ACCESS_KEY}" >> env/staging.ini
    - >
      make docker-run-deis-client
      deis2-config-create DEIS_PROFILE=staging DEIS2_USERNAME=${DEIS2_STAGE_USERNAME} DEIS2_TOKEN=${DEIS2_STAGE_TOKEN}
      deis2-create DEIS_APPLICATION="${APPLICATION}-03"
      deis2-config-push DEIS2_ENV_FILE=env/staging.ini
      deis2-memory-limits-set DEIS2_MEMORY_LIMITS="${DEIS_MEMORY_LIMITS_STAGING}" 
      deis2-cpu-limits-set deis2-healthchecks-set
      deis2-pull TAG=$CI_TAG
      deis2-scale
      deis2-info deis2-limits-list deis2-healthchecks-list deis2-processes-check
  tags: [ docker-engine, io ]
  dependencies: []

deploy:production-n3:
  stage: deploy
  environment: production
  when: manual
  only:
    - master
  script:
    - >
      make docker-run-deis-client
      deis2-config-create DEIS_PROFILE=production-n3 DEIS2_CONTROLLER=${DEIS_CONTROLLER_PROD_N3} DEIS2_USERNAME=${DEIS2_PROD_N3_USERNAME} DEIS2_TOKEN=${DEIS2_PROD_N3_TOKEN}
      deis2-create
      deis2-config-push DEIS2_ENV_FILE=env/prod_n3.ini
      deis2-memory-limits-set DEIS2_MEMORY_LIMITS="${DEIS_MEMORY_LIMITS_PROD_N3}" 
      deis2-cpu-limits-set deis2-healthchecks-set
      deis2-pull TAG=$CI_TAG
      deis2-scale DEIS2_SCALE="${DEIS_SCALE_PROD_N3}"
      deis2-info deis2-limits-list deis2-healthchecks-list deis2-processes-check
  tags: [ docker-engine, io ]
  dependencies: []

# ================= End =================

cleanup:registry:
  stage: end
  when: always
  only:
    - master
  script:
    - make docker-registry-images-cleanup TAG="master-" TIME_LIFE_IMAGE=604800 # 7 days
    - make docker-registry-images-cleanup TAG="branch-" TIME_LIFE_IMAGE=604800 # 7 days
    - make docker-registry-images-cleanup TAG="feature-" TIME_LIFE_IMAGE=604800 # 7 days
  dependencies: []
  tags: [ docker-engine, io ]

cleanup:runner:
  stage: end
  when: always
  only:
    - master
  script:
    - make docker-containers-cleanup
    - make docker-images-cleanup TAG="master-" TIME_LIFE_IMAGE=86400 # 1 day
    - make docker-images-cleanup TAG="branch-" TIME_LIFE_IMAGE=345600 # 4 days
    - make docker-images-cleanup TAG="feature-" TIME_LIFE_IMAGE=345600 # 4 days
  dependencies: []
  tags: [ docker-engine, io ]
