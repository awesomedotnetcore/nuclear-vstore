variables:
  APPLICATION: "ams-vstore"
  REGISTRY: "docker-hub.2gis.ru"
  IMAGE: "ams/vstore"
  DEIS_CONTROLLER_PROD_N3: "http://deis.n3.nato/"
  DEIS_CONTROLLER_PROD_M1: "http://deis.m1.nato/"
  DEIS_CONTROLLER_PROD_D1: "http://deis.d1.nato/"
  DEIS_MEMORY_LIMITS_PROD_N3: "cmd=256M"
  DEIS_MEMORY_LIMITS_PROD_M1: "cmd=256M"
  DEIS_MEMORY_LIMITS_PROD_D1: "cmd=256M"
  DEIS_SCALE_PROD_N3: "cmd=1"
  DEIS_SCALE_PROD_M1: "cmd=1"
  DEIS_SCALE_PROD_D1: "cmd=1"

stages:
  - build:app
  - build:image
  - deploy

# ================= Build =================

build:app:
  image: $REGISTRY/microsoft/aspnetcore-build:1.1.0-projectjson
  stage: build:app
  environment: test
  when: manual
  script:
    - dotnet restore
    - dotnet publish VStore.Host/project.json -c release -o $(pwd)/publish/vstore
  tags:
    - 2gis
    - docker
  artifacts:
    name: "${APPLICATION}_${CI_BUILD_REF_NAME}"
    expire_in: '1 week'
    paths:
      - publish/vstore/

build:image:
  variables:
    GIT_STRATEGY: none
  image: $REGISTRY/2gis/docker:1.11.2
  services:
    - docker:dind
  stage: build:image
  environment: test
  when: manual
  script:
    - REGISTRY=$REGISTRY IMAGE=$IMAGE TAG=$CI_BUILD_REF_NAME DOCKER_FILE=publish/vstore/Dockerfile DOCKER_BUILD_CONTEXT=publish/vstore make docker-build
    - REGISTRY=$REGISTRY IMAGE=$IMAGE TAG=$CI_BUILD_REF_NAME make docker-push
  tags:
    - 2gis
    - docker
  when: on_success

# ================ Deploy =================

deploy:staging-01:
  image: $REGISTRY/2gis/deis-client:1.13
  stage: deploy
  environment: staging
  when: manual
  script:
    - sed -i -e 's/{EnvIndex}/01/g' env/staging.ini
    - echo "AWS_ACCESS_KEY_ID=${CEPH_STAGING_KEY_ID}" >> env/staging.ini
    - echo "AWS_SECRET_ACCESS_KEY=${CEPH_STAGING_ACCESS_KEY}" >> env/staging.ini
    - DEIS_APPLICATION="${APPLICATION}-01" DEIS_PROFILE=staging DEIS_USERNAME=$DEIS_STAGE_USERNAME DEIS_TOKEN=$DEIS_STAGE_TOKEN make deis-config-create
    - DEIS_APPLICATION="${APPLICATION}-01" DEIS_PROFILE=staging make deis-create
    - DEIS_APPLICATION="${APPLICATION}-01" DEIS_PROFILE=staging DEIS_ENV_FILE=env/staging.ini make deis-config-push
    - DEIS_APPLICATION="${APPLICATION}-01" DEIS_PROFILE=staging REGISTRY=$REGISTRY IMAGE=$IMAGE TAG=$CI_BUILD_REF_NAME make deis-pull
    - DEIS_APPLICATION="${APPLICATION}-01" DEIS_PROFILE=staging make deis-scale
    - DEIS_APPLICATION="${APPLICATION}-01" DEIS_PROFILE=staging make deis-info
    - DEIS_APPLICATION="${APPLICATION}-01" DEIS_PROFILE=staging make deis-apps-check
  tags:
    - 2gis
    - docker

deploy:staging-02:
  image: $REGISTRY/2gis/deis-client:1.13
  stage: deploy
  environment: staging
  when: manual
  script:
    - sed -i -e 's/{EnvIndex}/02/g' env/staging.ini
    - echo "AWS_ACCESS_KEY_ID=${CEPH_STAGING_KEY_ID}" >> env/staging.ini
    - echo "AWS_SECRET_ACCESS_KEY=${CEPH_STAGING_ACCESS_KEY}" >> env/staging.ini
    - DEIS_APPLICATION="${APPLICATION}-02" DEIS_PROFILE=staging DEIS_USERNAME=$DEIS_STAGE_USERNAME DEIS_TOKEN=$DEIS_STAGE_TOKEN make deis-config-create
    - DEIS_APPLICATION="${APPLICATION}-02" DEIS_PROFILE=staging make deis-create
    - DEIS_APPLICATION="${APPLICATION}-02" DEIS_PROFILE=staging DEIS_ENV_FILE=env/staging.ini make deis-config-push
    - DEIS_APPLICATION="${APPLICATION}-02" DEIS_PROFILE=staging REGISTRY=$REGISTRY IMAGE=$IMAGE TAG=$CI_BUILD_REF_NAME make deis-pull
    - DEIS_APPLICATION="${APPLICATION}-02" DEIS_PROFILE=staging make deis-scale
    - DEIS_APPLICATION="${APPLICATION}-02" DEIS_PROFILE=staging make deis-info
    - DEIS_APPLICATION="${APPLICATION}-02" DEIS_PROFILE=staging make deis-apps-check
  tags:
    - 2gis
    - docker

deploy:staging-03:
  image: $REGISTRY/2gis/deis-client:1.13
  stage: deploy
  environment: staging
  when: manual
  script:
    - sed -i -e 's/{EnvIndex}/03/g' env/staging.ini
    - echo "AWS_ACCESS_KEY_ID=${CEPH_STAGING_KEY_ID}" >> env/staging.ini
    - echo "AWS_SECRET_ACCESS_KEY=${CEPH_STAGING_ACCESS_KEY}" >> env/staging.ini
    - DEIS_APPLICATION="${APPLICATION}-03" DEIS_PROFILE=staging DEIS_USERNAME=$DEIS_STAGE_USERNAME DEIS_TOKEN=$DEIS_STAGE_TOKEN make deis-config-create
    - DEIS_APPLICATION="${APPLICATION}-03" DEIS_PROFILE=staging make deis-create
    - DEIS_APPLICATION="${APPLICATION}-03" DEIS_PROFILE=staging DEIS_ENV_FILE=env/staging.ini make deis-config-push
    - DEIS_APPLICATION="${APPLICATION}-03" DEIS_PROFILE=staging REGISTRY=$REGISTRY IMAGE=$IMAGE TAG=$CI_BUILD_REF_NAME make deis-pull
    - DEIS_APPLICATION="${APPLICATION}-03" DEIS_PROFILE=staging make deis-scale
    - DEIS_APPLICATION="${APPLICATION}-03" DEIS_PROFILE=staging make deis-info
    - DEIS_APPLICATION="${APPLICATION}-03" DEIS_PROFILE=staging make deis-apps-check
  tags:
    - 2gis
    - docker

deploy:production-n3:
  image: $REGISTRY/2gis/deis-client:1.13
  stage: deploy
  environment: production
  when: manual
  only:
    - master
  script:
    - DEIS_PROFILE=production-n3 DEIS_CONTROLLER=$DEIS_CONTROLLER_PROD_N3 DEIS_USERNAME=$DEIS_PROD_N3_USERNAME DEIS_TOKEN=$DEIS_PROD_N3_TOKEN make deis-config-create
    - DEIS_PROFILE=production-n3 make deis-create
    - DEIS_PROFILE=production-n3 DEIS_MEMORY_LIMITS="${DEIS_MEMORY_LIMITS_PROD_N3}" make deis-memory-limits-set
    - DEIS_PROFILE=production-n3 DEIS_ENV_FILE=env/prod_n3.ini make deis-config-push
    - DEIS_PROFILE=production-n3 REGISTRY=$REGISTRY IMAGE=$IMAGE TAG=${CI_BUILD_REF_NAME} make deis-pull
    - DEIS_PROFILE=production-n3 DEIS_SCALE="${DEIS_SCALE_PROD_N3}" make deis-scale
    - DEIS_PROFILE=production-n3 make deis-info
    - DEIS_PROFILE=production-n3 make deis-apps-check
  tags:
    - 2gis
    - docker
